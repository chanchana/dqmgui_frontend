{"version":3,"file":"static/webpack/static/development/pages/index.js.513a44b5393849037bc2.hot-update.js","sources":["webpack:///./components/browsing/index.tsx","webpack:///./components/navigation/selectedData.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Form from 'antd/lib/form/Form';\r\n\r\nimport { WrapperDiv } from '../../containers/display/styledComponents';\r\nimport { DatasetsBrowser } from './datasetsBrowsing/datasetsBrowser';\r\nimport { DatasetsBuilder } from './datasetsBrowsing/datasetNameBuilder';\r\nimport { RunBrowser } from './runsBrowser';\r\nimport { LumesectionBrowser } from './lumesectionBroweser';\r\nimport { dataSetSelections } from '../constants';\r\nimport { StyledFormItem } from '../styledComponents';\r\nimport { DropdownMenu } from '../menu';\r\nimport { useRouter } from 'next/router';\r\nimport { QueryProps } from '../../containers/display/interfaces';\r\nimport { useChangeRouter } from '../../hooks/useChangeRouter';\r\nimport { store } from '../../contexts/leftSideContext';\r\nimport { changeRouter, getChangedQueryParams } from '../../containers/display/utils';\r\n\r\n\r\nexport const Browser = () => {\r\n  const [datasetOption, setDatasetOption] = useState(\r\n    dataSetSelections[0].value\r\n  );\r\n  const router = useRouter();\r\n  const query: QueryProps = router.query;\r\n\r\n  const run_number = query.run_number ? query.run_number : '';\r\n  const dataset_name = query.dataset_name ? query.dataset_name : '';\r\n  const lumi = query.lumi ? parseInt(query.lumi) : NaN;\r\n\r\n  const { setLumisection } = React.useContext(store)\r\n  const [currentRunNumber, setCurrentRunNumber] = useState(run_number);\r\n  const [currentDataset, setCurrentDataset] = useState<string>(dataset_name);\r\n\r\n  const lumisectionsChangeHandler = (lumi: number) => {\r\n    //in main navigation when lumisection is changed, new value have to be set to url\r\n    changeRouter(getChangedQueryParams({ lumi: lumi }, query))\r\n    //setLumisection from store(using useContext) set lumisection value globally.\r\n    //This set value is reachable for lumisection browser in free search dialog (you can see it, when search button next to browsers is clicked).\r\n\r\n    //Both lumisection browser have different handers, they have to act differently according to their place:\r\n    //IN THE MAIN NAV: lumisection browser value in the main navigation is changed, this HAVE to be set to url;\r\n    //FREE SEARCH DIALOG: lumisection browser value in free search dialog is changed it HASN'T to be set to url immediately, just when button 'ok' \r\n    //in dialog is clicked THEN value is set to url. So, useContext let us to change lumi value globally without changing url, when wee no need that.\r\n     //And in this handler lumi value set to useContext store is used as initial lumi value in free search dialog. \r\n    setLumisection(lumi)\r\n  }\r\n\r\n  useChangeRouter({\r\n    run_number: currentRunNumber, dataset_name: currentDataset\r\n  }, [currentRunNumber, currentDataset], true)\r\n\r\n  return (\r\n    <Form>\r\n      <WrapperDiv>\r\n        <WrapperDiv>\r\n          <RunBrowser\r\n            query={query}\r\n            currentRunNumber={currentRunNumber}\r\n            setCurrentRunNumber={setCurrentRunNumber}\r\n            currentDataset={currentDataset}\r\n          />\r\n        </WrapperDiv>\r\n        {/* <WrapperDiv>\r\n          <LumesectionBrowser\r\n            currentLumisection={lumi}\r\n            currentRunNumber={currentRunNumber}\r\n            currentDataset={currentDataset}\r\n            handler={lumisectionsChangeHandler}\r\n            color='white'\r\n          />\r\n        </WrapperDiv> */}\r\n        <StyledFormItem\r\n          label={\r\n            <DropdownMenu\r\n              options={dataSetSelections}\r\n              action={setDatasetOption}\r\n              defaultValue={dataSetSelections[0]}\r\n            />\r\n          }\r\n        >\r\n          {datasetOption === dataSetSelections[0].value ? (\r\n            <WrapperDiv>\r\n              <DatasetsBrowser\r\n                currentRunNumber={currentRunNumber}\r\n                currentDataset={currentDataset}\r\n                setCurrentDataset={setCurrentDataset}\r\n                query={query}\r\n              />\r\n            </WrapperDiv>\r\n          ) : (\r\n              <WrapperDiv>\r\n                <DatasetsBuilder\r\n                  currentRunNumber={currentRunNumber}\r\n                  currentDataset={currentDataset}\r\n                  query={query}\r\n                />\r\n              </WrapperDiv>\r\n            )}\r\n        </StyledFormItem>\r\n      </WrapperDiv>\r\n    </Form>\r\n  );\r\n};\r\n","import * as React from 'react'\r\nimport { Row, Col } from 'antd'\r\n\r\nimport { LumesectionBrowser } from '../browsing/lumesectionBroweser'\r\nimport Form from 'antd/lib/form/Form'\r\nimport { StyledFormItem } from '../styledComponents'\r\nimport { store } from '../../contexts/leftSideContext'\r\nimport { changeRouter, getChangedQueryParams } from '../../containers/display/utils'\r\nimport { useRouter } from 'next/router'\r\nimport { QueryProps } from '../../containers/display/interfaces'\r\n\r\ninterface SelectedDataProps {\r\n  dataset_name: string;\r\n  run_number: string;\r\n  form: any;\r\n}\r\n\r\nexport const SelectedData = ({ dataset_name, run_number, form }: SelectedDataProps) => {\r\n  const { lumisection, setLumisection } = React.useContext(store)\r\n  const router = useRouter();\r\n  const query: QueryProps = router.query;\r\n\r\n  const lumisectionsChangeHandler = (lumi: number) => {\r\n    //we set lumisection in inseContext store in order to save a it's value.\r\n    //When form is submitted(onFinish...)(clicked button \"OK\" in dialog), then \r\n    //url is changed\r\n    setLumisection(lumi)\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      onFinish={(params) => {\r\n        //when OK is clicked, run number, dataset and lumi params in url is changed.\r\n        changeRouter(getChangedQueryParams(params, query))\r\n      }}\r\n      fields={[{ name: 'dataset_name', value: dataset_name },\r\n      { name: 'run_number', value: run_number },\r\n      { name: 'lumi', value: lumisection }]}\r\n    >\r\n      <hr />\r\n      <Row>\r\n        <StyledFormItem name={'dataset_name'} label=\"Dataset name\">\r\n          <Col style={{ fontWeight: 'bold', fontStyle: \"italic\" }}>{dataset_name}</Col>\r\n        </StyledFormItem>\r\n      </Row>\r\n      <Row>\r\n        <StyledFormItem name={'run_number'} label=\"Run number\">\r\n          <Col style={{ fontWeight: 'bold', fontStyle: \"italic\" }} >{run_number}</Col>\r\n        </StyledFormItem>\r\n      </Row>\r\n      <Row>\r\n        {/* <Col>\r\n          <LumesectionBrowser\r\n            color=\"black\"\r\n            handler={lumisectionsChangeHandler}\r\n            currentLumisection={lumisection}\r\n            currentDataset={dataset_name}\r\n            currentRunNumber={run_number}\r\n          /></Col> */}\r\n      </Row>\r\n      <hr />\r\n    </Form>\r\n  )\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;A","sourceRoot":""}