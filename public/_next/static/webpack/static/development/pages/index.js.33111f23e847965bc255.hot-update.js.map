{"version":3,"file":"static/webpack/static/development/pages/index.js.33111f23e847965bc255.hot-update.js","sources":["webpack:///./containers/display/DisplayFolderAndPlot.tsx"],"sourcesContent":["import React, { FC, useState, useContext } from 'react';\nimport { Row, Col, Button } from 'antd';\nimport { SettingOutlined } from '@ant-design/icons';\n\nimport { useRouter } from 'next/router';\n\nimport { useRequest } from '../../hooks/useRequest';\nimport { PlotDataProps, QueryProps } from './interfaces';\nimport { ZoomedPlots } from '../../components/plots/zoomedPlots';\nimport { ViewDetailsMenu } from '../../components/viewDetailsMenu';\nimport { Wrapper, DivWrapper } from './styledComponents';\nimport { FolderPath } from './folderPath';\nimport {\n  getSelectedPlots,\n  doesPlotExists,\n  getContents,\n  getDirectories,\n} from './utils';\nimport { SpinnerWrapper, Spinner } from '../search/styledComponents';\nimport { RightSideStateProvider } from '../../contexts/rightSideContext';\nimport { LeftSidePlots } from '../../components/plots/plot';\nimport { Directories } from './directories';\nimport { NoResultsFound } from '../search/noResultsFound';\nimport { CustomDiv, CustomRow, StyledSecondaryButton } from '../../components/styledComponents';\nimport { useFilterFolders } from '../../hooks/useFilterFolders';\nimport { SettingsModal } from '../../components/settings'\nimport { store } from '../../contexts/leftSideContext';\n\ninterface DirectoryInterface {\n  subdir: string;\n}\n\nexport interface PlotInterface {\n  obj: string;\n  path: string;\n  content: any;\n  properties: any;\n}\n\ninterface FolderProps {\n  folder_path?: string;\n  run_number: string;\n  dataset_name: string;\n}\n\nconst DiplayFolder: FC<FolderProps> = ({\n  folder_path,\n  run_number,\n  dataset_name,\n}) => {\n  const {\n    data,\n    isLoading,\n  } = useRequest(\n    `/data/json/archive/${run_number}${dataset_name}/${folder_path}`,\n    {},\n    [folder_path]\n  );\n\n  const [openSettings, toggleSettingsModal] = useState(false)\n  const contents: (PlotInterface & DirectoryInterface)[] = getContents(data);\n  const allDirectories = getDirectories(contents);\n  const router = useRouter();\n  const query: QueryProps = router.query;\n  const selectedPlots = query.selected_plots;\n  const { viewPlotsPosition, proportion } = useContext(store)\n  //filtering directories by selected workspace\n  const { foldersByPlotSearch, plots } = useFilterFolders(\n    query,\n    allDirectories\n  );\n\n  const filteredFolders: any[] = foldersByPlotSearch ? foldersByPlotSearch : [];\n  const selected_plots: PlotDataProps[] = getSelectedPlots(\n    selectedPlots,\n    plots\n  );\n\n  return (\n    <>\n      <Row style={{ padding: 8, width: '100%', justifyContent: 'space-between' }}>\n        <SettingsModal\n          openSettings={openSettings}\n          toggleSettingsModal={toggleSettingsModal}\n          isAnyPlotSelected={selected_plots.length === 0}\n          />\n        <Col style={{ padding: 8 }}>\n          <FolderPath folder_path={folder_path} />\n        </Col>\n        <Col>\n          <StyledSecondaryButton\n            icon={<SettingOutlined />}\n            onClick={() => toggleSettingsModal(true)}\n          >\n            Settings\n          </StyledSecondaryButton>\n        </Col>\n      </Row>\n      <DivWrapper selectedPlots={selected_plots.length > 0} position={viewPlotsPosition}>\n        <Wrapper zoomed={selected_plots.length > 0}\n         notZoomedPlot={true} \n         position={viewPlotsPosition}\n         proportion={proportion}\n         >\n          {doesPlotExists(contents).length > 0 && (\n            <ViewDetailsMenu selected_plots={selected_plots.length > 0} />\n          )}\n          {isLoading ? (\n            <SpinnerWrapper>\n              <Spinner />\n            </SpinnerWrapper>\n          ) : (\n              <>\n                <CustomRow width=\"100%\">\n                  <Directories directories={filteredFolders} />\n                </CustomRow>\n                <Row>\n                  {plots.map((plot: PlotDataProps | undefined) => {\n                    if (plot) {\n                      return (\n                        <div key={plot.name}>\n                          <LeftSidePlots\n                            plot={plot}\n                            selected_plots={selected_plots}\n                          />\n                        </div>\n                      );\n                    } return <></>\n                  })}\n                </Row>\n              </>\n            )}\n\n          {!isLoading && filteredFolders.length === 0 && plots.length === 0 && (\n            <CustomDiv fullwidth=\"true\">\n              <NoResultsFound />\n            </CustomDiv>\n          )}\n        </Wrapper>\n        {selected_plots.length > 0 && (\n          <Wrapper zoomed={selected_plots.length} position={viewPlotsPosition}>\n            <RightSideStateProvider>\n              <ZoomedPlots selected_plots={selected_plots} />\n            </RightSideStateProvider>\n          </Wrapper>\n        )}\n      </DivWrapper>\n    </>\n  );\n};\n\nexport default DiplayFolder;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAsBA;AACA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AADA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;A","sourceRoot":""}