{"version":3,"file":"static/webpack/static/development/pages/index.js.812d8b9681d76f63aebf.hot-update.js","sources":["webpack:///./components/plots/zoomedPlots/zoomedOverlayPlots/zoomedOverlaidJSROOTPlot.tsx"],"sourcesContent":["import React from 'react';\r\nimport cleanDeep from 'clean-deep';\r\nimport { useRouter } from 'next/router';\r\n\r\nimport { get_jroot_plot } from '../../../../config/config';\r\nimport {\r\n  ParamsForApiProps,\r\n  TripleProps,\r\n  PlotDataProps,\r\n  QueryProps,\r\n} from '../../../../containers/display/interfaces';\r\nimport { useRequest } from '../../../../hooks/useRequest';\r\nimport { useEffect } from 'react';\r\nimport {\r\n  StyledCol,\r\n  Column,\r\n  StyledPlotRow,\r\n  PlotNameCol,\r\n  MinusIcon,\r\n  ImageDiv,\r\n} from '../../../../containers/display/styledComponents';\r\nimport {\r\n  removePlotFromRightSide,\r\n} from '../../plot/singlePlot/utils';\r\nimport { Button } from 'antd';\r\n\r\ninterface ZoomedJSROOTPlotsProps {\r\n  selected_plot: PlotDataProps;\r\n  params_for_api: ParamsForApiProps;\r\n}\r\nconst drawJSROOT = async (histogramParam: string, plot_name: string) => {\r\n  //@ts-ignore \r\n  await JSROOT.cleanup(`${histogramParam}_${plot_name}`);\r\n\r\n  //@ts-ignore\r\n  JSROOT.draw(\r\n    `${histogramParam}_${plot_name}`,\r\n    //@ts-ignore\r\n    JSROOT.parse(JSON.stringify(overlaidJSROOTPlot)),\r\n    `${histogramParam}`\r\n  );\r\n}\r\n\r\nexport const ZoomedOverlaidJSROOTPlot = ({\r\n  selected_plot,\r\n  params_for_api,\r\n}: ZoomedJSROOTPlotsProps) => {\r\n  const router = useRouter();\r\n  const query: QueryProps = router.query;\r\n\r\n  const { data } = useRequest(get_jroot_plot(params_for_api), {}, [\r\n    selected_plot.name,\r\n  ]);\r\n\r\n  const overlaid_plots_runs_and_datasets: any[] = params_for_api?.overlay_plot\r\n    ? params_for_api.overlay_plot.map((plot: TripleProps) => {\r\n      const copy: any = { ...params_for_api };\r\n\r\n      if (plot.dataset_name) {\r\n        copy.dataset_name = plot.dataset_name;\r\n      }\r\n      copy.run_number = plot.run_number;\r\n      const { data } = useRequest(get_jroot_plot(copy), {}, [\r\n        selected_plot.name, query.lumi\r\n      ]);\r\n      return data;\r\n    })\r\n    : [];\r\n\r\n  overlaid_plots_runs_and_datasets.push(data);\r\n\r\n  let overlaidJSROOTPlot: any = {};\r\n\r\n  //checking how many histograms are overlaid, because just separated objects\r\n  // (i.e separate variables ) to JSROOT.CreateTHStack() func\r\n  if (overlaid_plots_runs_and_datasets.length === 0) {\r\n    return null;\r\n  } else if (overlaid_plots_runs_and_datasets.length === 1) {\r\n    const histogram1 = overlaid_plots_runs_and_datasets[0];\r\n    //@ts-ignore\r\n    overlaidJSROOTPlot = JSROOT.CreateTHStack(histogram1);\r\n  } else if (overlaid_plots_runs_and_datasets.length === 2) {\r\n    const histogram1 = overlaid_plots_runs_and_datasets[0];\r\n    const histogram2 = overlaid_plots_runs_and_datasets[1];\r\n    //@ts-ignore\r\n    overlaidJSROOTPlot = JSROOT.CreateTHStack(histogram1, histogram2);\r\n  } else if (overlaid_plots_runs_and_datasets.length === 3) {\r\n    const histogram1 = overlaid_plots_runs_and_datasets[0];\r\n    const histogram2 = overlaid_plots_runs_and_datasets[1];\r\n    const histogram3 = overlaid_plots_runs_and_datasets[2];\r\n    //@ts-ignore\r\n    overlaidJSROOTPlot = JSROOT.CreateTHStack(\r\n      histogram1,\r\n      histogram2,\r\n      histogram3\r\n    );\r\n  } else if (overlaid_plots_runs_and_datasets.length === 4) {\r\n    const histogram1 = overlaid_plots_runs_and_datasets[0];\r\n    const histogram2 = overlaid_plots_runs_and_datasets[1];\r\n    const histogram3 = overlaid_plots_runs_and_datasets[2];\r\n    const histogram4 = overlaid_plots_runs_and_datasets[3];\r\n    //@ts-ignore\r\n    overlaidJSROOTPlot = JSROOT.CreateTHStack(\r\n      histogram1,\r\n      histogram2,\r\n      histogram3,\r\n      histogram4\r\n    );\r\n  }\r\n\r\n  const histogramParam = params_for_api.normalize ? 'hist' : 'nostack';\r\n  //make sure that no null histograms are passed to draw func.\r\n  //on first, second reneder overlaidJSROOTPlot.fHists.arr is [null, null]\r\n  //@ts-ignore\r\n  useEffect(() => {\r\n    if (\r\n      cleanDeep(overlaidJSROOTPlot.fHists.arr).length ===\r\n      overlaidJSROOTPlot.fHists.arr.length\r\n    ) {\r\n      drawJSROOT(histogramParam, selected_plot.name)\r\n    }\r\n  });\r\n\r\n  return (\r\n    <StyledCol space={2}>\r\n      <StyledPlotRow\r\n        minheight={params_for_api.height}\r\n        width={params_for_api.width}\r\n        is_plot_selected={true.toString()}\r\n        nopointer={true.toString()}\r\n      // report={selected_plot.properties.report}\r\n      >\r\n        <PlotNameCol>{selected_plot.displayedName}</PlotNameCol>\r\n        <Column>\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => removePlotFromRightSide(query, selected_plot)}\r\n            icon={<MinusIcon />}\r\n          />\r\n        </Column>\r\n        <ImageDiv\r\n          style={{ display: params_for_api.normalize ? '' : 'none' }}\r\n          id={`hist_${selected_plot.name}`}\r\n          width={params_for_api.width}\r\n          height={params_for_api.height}\r\n        />\r\n        <ImageDiv\r\n          style={{ display: params_for_api.normalize ? 'none' : '' }}\r\n          id={`nostack_${selected_plot.name}`}\r\n          width={params_for_api.width}\r\n          height={params_for_api.height}\r\n        />\r\n      </StyledPlotRow>\r\n    </StyledCol>\r\n  );\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAQA;AAGA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AAGA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AAGA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAPA;AAAA;AACA;AASA;AACA;AAGA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;A","sourceRoot":""}