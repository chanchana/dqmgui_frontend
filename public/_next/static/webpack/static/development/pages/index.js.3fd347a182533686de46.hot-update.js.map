{"version":3,"file":"static/webpack/static/development/pages/index.js.3fd347a182533686de46.hot-update.js","sources":["webpack:///./components/browsing/lumesectionBroweser.tsx"],"sourcesContent":["import * as React from 'react'\r\nimport { Col, Select, Spin, Button, Row } from 'antd';\r\nimport { CaretRightFilled, CaretLeftFilled } from '@ant-design/icons';\r\n\r\nimport { useRequest } from '../../hooks/useRequest'\r\nimport { getLumisections } from '../../config/config';\r\nimport { StyledSelect, OptionParagraph } from '../viewDetailsMenu/styledComponents';\r\nimport { StyledFormItem } from '../styledComponents';\r\nimport { useChangeRouter } from '../../hooks/useChangeRouter';\r\nimport { QueryProps, OptionProps } from '../../containers/display/interfaces';\r\nimport { useRouter } from 'next/router';\r\n\r\nconst { Option } = Select;\r\n\r\ninterface AllRunsWithLumiProps {\r\n  run: string;\r\n  lumi: number;\r\n  dataset: string;\r\n}\r\ninterface LumesectionBrowserProps {\r\n  currentLumisection: number;\r\n  currentRunNumber: string;\r\n  currentDataset: string;\r\n  handler(lumi: number): void;\r\n  color?: string;\r\n}\r\n\r\nexport const LumesectionBrowser = ({ color, currentLumisection, handler, currentRunNumber, currentDataset }: LumesectionBrowserProps) => {\r\n  //getting all run lumisections \r\n  const { data, isLoading, errors } = useRequest(getLumisections({\r\n    run_number: currentRunNumber,\r\n    dataset_name: currentDataset, lumi: -1\r\n  }), {}, [currentRunNumber, currentDataset])\r\n\r\n  const router = useRouter();\r\n  const query: QueryProps = router.query;\r\n\r\n  const all_runs_with_lumi = data ? data.data : []\r\n  //extracting just lumisections from data object\r\n  const lumisections: OptionProps[] = all_runs_with_lumi.length > 0 ? all_runs_with_lumi.map((run: AllRunsWithLumiProps) => {\r\n    return { label: run.lumi.toString(), value: run.lumi }\r\n  }) : []\r\n\r\n  //-1 - it represents ALL lumisections. If none lumisection is selected, then plots which are displaid \r\n  //consist of ALL lumisections. \r\n  //*TO DO** change -1 to ALL\r\n  lumisections.unshift({ label: 'All', value: -1 })\r\n\r\n  //if lumisection is not setted to url, we set lumisection to -1\r\n\r\n  const lumisectionsValues = lumisections.map((lumi: OptionProps) => lumi.value)\r\n  useChangeRouter({ lumi: lumisectionsValues[0] }, [], !query.lumi)\r\n\r\n  const currentLumiIndex = lumisectionsValues.indexOf(currentLumisection);\r\nconsole.log(lumisections, currentLumiIndex)\r\n  return (\r\n    <Col>\r\n      {/* <StyledFormItem labelcolor={color} name={'lumi'} label=\"Lumi\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Col>\r\n            <Button\r\n              disabled={!lumisections[currentLumiIndex - 1]}\r\n              icon={<CaretLeftFilled />}\r\n              type=\"link\"\r\n              onClick={() => {\r\n                handler(lumisectionsValues[currentLumiIndex - 1]);\r\n              }}\r\n            />\r\n          </Col>\r\n\r\n          <Col>\r\n            <StyledSelect\r\n              dropdownMatchSelectWidth={false}\r\n              value={currentLumisection}\r\n              onChange={(e: any) => {\r\n                handler(parseInt(e));\r\n              }}\r\n              showSearch={true}\r\n            >\r\n              {lumisections && lumisections.map((current_lumisection: OptionProps) => {\r\n                return (\r\n                  <Option value={current_lumisection.value} key={current_lumisection.label} >\r\n                    {isLoading ? (\r\n                      <OptionParagraph>\r\n                        <Spin />\r\n                      </OptionParagraph>\r\n                    ) : (\r\n                        <p>{current_lumisection}</p>\r\n                      )}\r\n                  </Option>\r\n                )\r\n              })\r\n              }\r\n            </StyledSelect>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              icon={<CaretRightFilled />}\r\n              disabled={!lumisections[currentLumiIndex + 1]}\r\n              type=\"link\"\r\n              onClick={() => {\r\n                handler(lumisectionsValues[currentLumiIndex + 1]);\r\n              }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </StyledFormItem> */}\r\n    </Col>\r\n  )\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAGA;AAEA;AAEA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AAFA;AAFA;AAAA;AAAA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqDA;;;;A","sourceRoot":""}